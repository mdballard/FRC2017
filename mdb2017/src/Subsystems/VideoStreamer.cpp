// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "VideoStreamer.h"
#include "wpilib.h"
#include "../RobotMap.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

VideoStreamer::VideoStreamer() : Subsystem("VideoStreamer") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	myCC.reset(new cameraControl());

	myCC->CAM1_AutoExposure = true;
	myCC->CAM1_AutoWhiteBalance = true;
	myCC->CAM1_Brightness = 80;
	myCC->CAM1_Enable = true;
	myCC->CAM1_Exposure = 75;
	myCC->CAM1_FPS = 30;
	myCC->CAM1_Selected = true;
	myCC->CAM1_WhiteBalance = 60;
	myCC->CAM2_AutoExposure = true;
	myCC->CAM2_AutoWhiteBalance = true;
	myCC->CAM2_Brightness = 80;
	myCC->CAM2_Enable = true;
	myCC->CAM2_Exposure = 75;
	myCC->CAM2_FPS = 30;
	myCC->CAM2_WhiteBalance = 60;
	myCC->Size_X = 320;
	myCC->Size_Y = 240;
	myCC->changeCount = 1;
}

void VideoStreamer::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}


// Put methods for controlling this subsystem
// here. Call these from Commands.


void VideoStreamer::IncreaseBrightness(bool cam1)
{
	if (cam1)
	{
		myCC->CAM1_Brightness++;
		if (myCC->CAM1_Brightness > 100) myCC->CAM1_Brightness = 100;
		SmartDashboard::PutNumber("CAM1_Brightness",myCC->CAM1_Brightness);
	} else
	{
		myCC->CAM2_Brightness++;
		if (myCC->CAM2_Brightness > 100) myCC->CAM2_Brightness = 100;
		SmartDashboard::PutNumber("CAM2_Brightness",myCC->CAM2_Brightness);
	}
	myCC->changeCount++;
}

void VideoStreamer::DecreaseBrightness(bool cam1)
{
	if (cam1)
	{
		myCC->CAM1_Brightness--;
		if (myCC->CAM1_Brightness < 0) myCC->CAM1_Brightness = 0;
		SmartDashboard::PutNumber("CAM1_Brightness",myCC->CAM1_Brightness);
	} else
	{
		myCC->CAM2_Brightness--;
		if (myCC->CAM2_Brightness < 0) myCC->CAM2_Brightness = 0;
		SmartDashboard::PutNumber("CAM2_Brightness",myCC->CAM2_Brightness);
	}
	myCC->changeCount++;

}

void VideoStreamer::IncreaseExposure(bool cam1)
{
	if (cam1)
	{
		myCC->CAM1_Exposure++;
		if (myCC->CAM1_Exposure > 100) myCC->CAM1_Exposure = 100;
		SmartDashboard::PutNumber("CAM1_Exposure",myCC->CAM1_Exposure);
		myCC->CAM1_AutoExposure = false;
		SmartDashboard::PutBoolean("CAM1_AutoExposure",false);
	} else
	{
		myCC->CAM2_Exposure++;
		if (myCC->CAM2_Exposure > 100) myCC->CAM2_Exposure = 100;
		SmartDashboard::PutNumber("CAM2_Exposure",myCC->CAM2_Exposure);
		SmartDashboard::PutBoolean("CAM2_AutoExposure",false);
		myCC->CAM2_AutoExposure = false;
	}
	myCC->changeCount++;

}

void VideoStreamer::DecreaseExposure(bool cam1)
{
	if (cam1)
	{
		myCC->CAM1_Exposure--;
		if (myCC->CAM1_Exposure < 0) myCC->CAM1_Exposure = 0;
		SmartDashboard::PutNumber("CAM1_Exposure",myCC->CAM1_Exposure);
		myCC->CAM1_AutoExposure = false;
		SmartDashboard::PutBoolean("CAM1_AutoExposure",false);
	} else
	{
		myCC->CAM2_Exposure--;
		if (myCC->CAM2_Exposure < 0) myCC->CAM2_Exposure = 0;
		SmartDashboard::PutNumber("CAM2_Exposure",myCC->CAM2_Exposure);
		myCC->CAM2_AutoExposure = false;
		SmartDashboard::PutBoolean("CAM2_AutoExposure",false);
	}
	myCC->changeCount++;
}

void VideoStreamer::SetAutoExposure(bool cam1)
{
	if (cam1)
	{
		myCC->CAM1_AutoExposure = true;
		SmartDashboard::PutBoolean("CAM1_AutoExposure",true);
	} else
	{
		myCC->CAM2_AutoExposure = true;
		SmartDashboard::PutBoolean("CAM2_AutoExposure",true);
	}
	myCC->changeCount++;
}

void VideoStreamer::IncreaseWhiteBalance(bool cam1)
{
	if (cam1)
	{
		myCC->CAM1_WhiteBalance++;
		if (myCC->CAM1_WhiteBalance > 100) myCC->CAM1_WhiteBalance = 100;
		SmartDashboard::PutNumber("CAM1_WB",myCC->CAM1_WhiteBalance);
		myCC->CAM1_AutoWhiteBalance = false;
		SmartDashboard::PutBoolean("CAM1_AutoWB",false);
	} else
	{
		myCC->CAM2_WhiteBalance++;
		if (myCC->CAM2_WhiteBalance > 100) myCC->CAM2_WhiteBalance = 100;
		SmartDashboard::PutNumber("CAM2_WB",myCC->CAM2_WhiteBalance);
		myCC->CAM2_AutoWhiteBalance = false;
		SmartDashboard::PutBoolean("CAM2_AutoWB",false);
	}
	myCC->changeCount++;
}

void VideoStreamer::DecreaseWhiteBalance(bool cam1)
{
	if (cam1)
	{
		myCC->CAM1_WhiteBalance--;
		if (myCC->CAM1_WhiteBalance < 0) myCC->CAM1_WhiteBalance = 0;
		SmartDashboard::PutNumber("CAM1_WB",myCC->CAM1_WhiteBalance);
		myCC->CAM1_AutoWhiteBalance = false;
		SmartDashboard::PutBoolean("CAM1_AutoWB",false);
	} else
	{
		myCC->CAM2_WhiteBalance--;
		if (myCC->CAM2_WhiteBalance < 0) myCC->CAM2_WhiteBalance = 0;
		SmartDashboard::PutNumber("CAM2_WB",myCC->CAM2_WhiteBalance);
		myCC->CAM2_AutoWhiteBalance = false;
		SmartDashboard::PutBoolean("CAM2_AutoWB",false);
	}
	myCC->changeCount++;

}

void VideoStreamer::SetAutoWhiteBalance(bool cam1)
{
	if (cam1)
	{
		myCC->CAM1_AutoWhiteBalance = true;
		SmartDashboard::PutBoolean("CAM1_AutoWB",true);
	} else
	{
		myCC->CAM2_AutoWhiteBalance = true;
		SmartDashboard::PutBoolean("CAM2_AutoWB",true);
	}
	myCC->changeCount++;
}

void VideoStreamer::SetFPS(int FPS, bool cam1)
{
	if (cam1)
	{
		myCC->CAM1_FPS = FPS;
		SmartDashboard::PutNumber("CAM1_FPS",myCC->CAM1_FPS);
	} else
	{
		myCC->CAM2_FPS = FPS;
		SmartDashboard::PutNumber("CAM2_FPS",myCC->CAM2_FPS);
	}
	myCC->changeCount++;
}

void VideoStreamer::SetSize(int x, int y)
{
	myCC->Size_X = x;
	myCC->Size_Y = y;
	myCC->changeCount++;
}

void VideoStreamer::StartStreaming()
{
	myCC->CAM1_Enable = true;
	myCC->CAM2_Enable = true;
	myCC->changeCount++;
}

void VideoStreamer::StopStreaming()
{
	myCC->CAM1_Enable = false;
	myCC->CAM2_Enable = false;
	myCC->changeCount++;
}

void VideoStreamer::SelectStream(int cam)
{
  if (cam == 0)
  {
	  myCC->CAM1_Selected = true;
	  SmartDashboard::PutString("Active Camera","Cam1");
  } else
  {
	  myCC->CAM1_Selected = false;
	  SmartDashboard::PutString("Active Camera","Cam2");
  }
  myCC->changeCount++;
}


