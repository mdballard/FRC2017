// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

#include "Video.h"
#include "RobotMap.h"


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES


Video::Video(cameraControl *control) {
	cc = control;
	myChangeCount = cc->changeCount -1;
	cam1CurrentCam = !(cc->CAM1_Selected);
}
    

bool Video::Init()
{
    CS_Status cstat;
    std::vector<cs::UsbCameraInfo> usbinfo;
	usbinfo = cs::EnumerateUsbCameras(&cstat);

	Cam_01.reset(new cs::UsbCamera(CameraServer::GetInstance()->StartAutomaticCapture(0)));
    Cam_02.reset(new cs::UsbCamera(CameraServer::GetInstance()->StartAutomaticCapture(1)));

    cvSink1 = CameraServer::GetInstance()->GetVideo(*(Cam_01.get()));
    cvSink2 = CameraServer::GetInstance()->GetVideo(*(Cam_02.get()));

    outputStreamStd = CameraServer::GetInstance()->PutVideo("RoboCam", cc->Size_X, cc->Size_Y);

	return true;
}

void Video::Configure()
{
	if (cc->changeCount != myChangeCount)
	{
	    Cam_01->SetResolution(cc->Size_X,cc->Size_Y);
	    Cam_01->SetBrightness(cc->CAM1_Brightness);
	    if (!cc->CAM1_AutoExposure)
	    {
	    	Cam_01->SetExposureManual(cc->CAM1_Exposure);
	    } else
	    {
	    	Cam_01->SetExposureAuto();
	    }
	    if(!cc->CAM1_AutoWhiteBalance)
	    {
	    	Cam_01->SetWhiteBalanceManual(cc->CAM1_WhiteBalance);
	    } else
	    {
	    	Cam_01->SetWhiteBalanceAuto();
	    }
	    Cam_01->SetFPS(cc->CAM1_FPS);

	    Cam_02->SetResolution(cc->Size_X,cc->Size_Y);
	    Cam_02->SetBrightness(cc->CAM2_Brightness);
	    if (!cc->CAM2_AutoExposure)
	    {
	    	Cam_02->SetExposureManual(cc->CAM2_Exposure);
	    } else
	    {
	    	Cam_02->SetExposureAuto();
	    }
	    if(!cc->CAM2_AutoWhiteBalance)
	    {
	    	Cam_02->SetWhiteBalanceManual(cc->CAM2_WhiteBalance);
	    } else
	    {
	    	Cam_02->SetWhiteBalanceAuto();
	    }
	    Cam_02->SetFPS(cc->CAM2_FPS);


	    if (cc->CAM1_Selected)
	    {
	    	if (!cam1CurrentCam)
	    	{
	    		cvSink2.SetEnabled(false);
                cvSink1.SetEnabled(true);
                cam1CurrentCam = true;
	    	}
	    } else
	    {
	    	if (cam1CurrentCam)
	    	{
	    		cvSink1.SetEnabled(false);
                cvSink2.SetEnabled(true);
                cam1CurrentCam = false;
	    	}

	    }
	    myChangeCount = cc->changeCount;
	}
}


void Video::Run()
{
	while (true)
	{
		Configure();
		if ((cam1CurrentCam) && (cc->CAM1_Enable))
		{
			cvSink1.GrabFrame(image);
			outputStreamStd.PutFrame(image);
		}
		if ((!cam1CurrentCam) && (cc->CAM2_Enable))
		{
			cvSink2.GrabFrame(image);
			outputStreamStd.PutFrame(image);
		}

	}
}


void Video::End()
{

}
