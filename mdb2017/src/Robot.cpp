// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

#include "Video.h"
#include "Robot.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION
std::shared_ptr<DriveTrain> Robot::driveTrain;
std::shared_ptr<Transmission> Robot::transmission;
std::shared_ptr<ShooterWheel> Robot::shooterWheel;
std::shared_ptr<Climber> Robot::climber;
std::shared_ptr<VideoStreamer> Robot::videoStreamer;
std::shared_ptr<Intake> Robot::intake;
std::shared_ptr<GearCarrier> Robot::gearCarrier;
std::shared_ptr<ShooterPixy> Robot::shooterPixy;
std::shared_ptr<GearPixy> Robot::gearPixy;
std::shared_ptr<Pneumatics> Robot::pneumatics;
std::shared_ptr<ForwardUltraSonics> Robot::forwardUltraSonics;
std::shared_ptr<PerimeterUltraSonics> Robot::perimeterUltraSonics;
std::unique_ptr<OI> Robot::oi;
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION
std::shared_ptr<Video> Robot::videoSys;

std::thread* videoThread;

void VideoT() {
    Robot::videoSys->Run();
}


void Robot::RobotInit() {
	RobotMap::init();
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    driveTrain.reset(new DriveTrain());
    transmission.reset(new Transmission());
    shooterWheel.reset(new ShooterWheel());
    climber.reset(new Climber());
    videoStreamer.reset(new VideoStreamer());
    intake.reset(new Intake());
    gearCarrier.reset(new GearCarrier());
    shooterPixy.reset(new ShooterPixy());
    gearPixy.reset(new GearPixy());
    pneumatics.reset(new Pneumatics());
    forwardUltraSonics.reset(new ForwardUltraSonics());
    perimeterUltraSonics.reset(new PerimeterUltraSonics());
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	// This MUST be here. If the OI creates Commands (which it very likely
	// will), constructing it during the construction of CommandBase (from
	// which commands extend), subsystems are not guaranteed to be
	// yet. Thus, their requires() statements may grab null pointers. Bad
	// news. Don't move it.
	oi.reset(new OI());

	// instantiate the command used for the autonomous period
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
	autonomousCommand.reset(new AutonomousCommand());
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
	videoSys.reset(new Video(RobotMap::videoStreamer->myCC.get()));
	videoSys->Init();

	videoThread = new std::thread(VideoT);
	videoThread->detach();
  }

/**
 * This function is called when the disabled button is hit.
 * You can use it to reset subsystems before shutting down.
 */
void Robot::DisabledInit(){

}

void Robot::DisabledPeriodic() {
	Scheduler::GetInstance()->Run();
}

void Robot::AutonomousInit() {
	if (autonomousCommand.get() != nullptr)
		autonomousCommand->Start();
}

void Robot::AutonomousPeriodic() {
	Scheduler::GetInstance()->Run();
}

void Robot::TeleopInit() {
	// This makes sure that the autonomous stops running when
	// teleop starts running. If you want the autonomous to
	// continue until interrupted by another command, remove
	// these lines or comment it out.
	if (autonomousCommand.get() != nullptr)
		autonomousCommand->Cancel();
}

void Robot::TeleopPeriodic() {
	Scheduler::GetInstance()->Run();
}

void Robot::TestPeriodic() {
	lw->Run();
}

START_ROBOT_CLASS(Robot);

